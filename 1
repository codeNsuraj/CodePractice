1. Check whether the given string is a palindrome or not?

2. Print the table of 2 by using recursion.

3. Print duplicates from given array.
public class C1 {
	public static void main(String... args) {
		int[] arr1 = { 1, 2, 3, 4, 5, 33, 33, 4 };
		int[] arr2 = new int[arr1.length];
		int k = 0;
		boolean dup = false;
		for (int i = 0; i < arr1.length; i++) {
			for (int j = 0; j < arr2.length; j++) {
				if (arr1[i] == arr2[j]) {
					dup = true;
					break;
				}
			}
			if (!dup) {
				arr2[k++] = arr1[i];
				dup = false;
			} else {
				System.out.println(arr1[i]);
			}
		}
	}
}

4. Reverse number.
public class C1 {
	public static void main(String... args) {
		int num = 1234;
		int rem = 0;
		int temp = num;
		int rev = 0;
		while (temp > 0) {
			rem = temp % 10;
			temp = temp / 10;
			rev = rev * 10 + rem;
		}
		System.out.println(rev);
	}
}

5. Find duplicates from String.
public class C1 {
	public static void main(String... args) {
		String str1 = "asdffss";
		String str2 = "";
		String str3 = "";
		for (int i = 0; i < str1.length(); i++) {
			if (str2.indexOf(str1.charAt(i)) == -1) {
				str2 = str2 + str1.charAt(i);
			} else {
				if (str3.indexOf(str1.charAt(i)) == -1) {
					str3 = str3 + str1.charAt(i);
				}
			}
		}
		System.out.println(str3);
	}
}

6. Fibonacci series.
public class C1 {
	public static void main(String... args) {
		int f = 0;
		int s = 1;
		int temp = 0;

		System.out.println(f);
		System.out.println(s);
		while (10 >= f + s) {
			temp = f;
			f = s;
			s = f + temp;
			System.out.println(s);
		}
	}
}

7. Remove duplicates from array
import java.util.Arrays;

public class C1 {
	public static void main(String... args) {

		int[] arr1 = { 1, 2, 3, 4, 4, 4, 5, 5, 6 };
		int[] arr2 = new int[arr1.length];
		boolean b = false;
		int k = 0;
		for (int i = 0; i < arr1.length; i++) {
			for (int j = 0; j < arr2.length; j++) {
				if (arr1[i] == arr2[j]) {
					b = true;
					break;
				}
			}
			if (!b) {
				arr2[k++] = arr1[i];
			} else {
				b = false;
			}
		}
		System.out.println(Arrays.toString(Arrays.copyOf(arr2, k)));
	}
}

8. Sql query to find 3rd larget number
select num 
from (select num from table1 order by num desc limit 3)
order by num asc
limit 1
